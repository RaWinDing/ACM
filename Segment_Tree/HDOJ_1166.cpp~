// HDOJ 1166
// 敌兵布阵
// by A Code Rabbit

#include <cstdio>
#include <cstring>

const int LIMITS = 50002;
const int LEN_COMMAND = 20;

int t;
int num_case = 0;

int n;
char command[LEN_COMMAND];
int x, y;

int tree[LIMITS << 2];

void Update(int pos);
void Build(int l, int r, int pos);
void Modify(int l, int r, int pos, int x, int y);
int Query(int l, int r, int pos, int x, int y);

int main() {
    scanf("%d", &t);
    while (t--) {
        scanf("%d", &n);
        Build(1, n, 1);
        printf("Case %d:\n", ++num_case);
        while (1) {
            getchar();
            scanf("%s", command);
            if (!strcmp(command, "Add")) {
                scanf("%d%d", &x, &y);
                Modify(1, n, 1, x, y);
            } else
            if (!strcmp(command, "Sub")) {
                scanf("%d%d", &x, &y);
                Modify(1, n, 1, x, -y);
            } else
            if (!strcmp(command, "Query")) {
                scanf("%d%d", &x, &y);
                printf("%d\n", Query(1, n, 1, x, y));
            } else
            if (!strcmp(command, "End")) {
                break;
            }
        }
    }

	return 0;
}

#define LSon(x) (x << 1) 
#define RSon(x) (x << 1 | 1)

void Update(int pos) {
    tree[pos] = tree[LSon(pos)] + tree[RSon(pos)];
}

void Build(int l, int r, int pos) {
    if (l == r) {
        scanf("%d", &tree[pos]);
        return;
    }
    int m = l + r >> 1;
    Build(l, m, LSon(pos));
    Build(m + 1, r, RSon(pos));
    Update(pos);
}

void Modify(int l, int r, int pos, int x, int y) {
    if (l == r) {
        tree[pos] += y;
        return;
    }
    int m = l + r >> 1;
    if (x <= m) {
        Modify(l, m, LSon(pos), x, y);
    } else {
        Modify(m + 1, r, RSon(pos), x, y);
    }
    Update(pos);
}

int Query(int l, int r, int pos, int x, int y) {
    if (l == x &&
        r == y)
    {
        return tree[pos];
    }
    int m = l + r >> 1;
    if (y <= m) {
        return Query(l, m, LSon(pos), x, y);
    } else
    if (x >= m + 1) {
        return Query(m + 1, r, RSon(pos), x, y);
    } else {
        return  Query(l, m, LSon(pos), x, m) + Query(m + 1, r, RSon(pos), m + 1, y);
    }
}
